//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-20051113-fcs 
// 	See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// 	Any modifications to this file will be lost upon recompilation of the source schema. 
// 	Generated on: 2005.11.16 um 11:03:34 CET 
//


package phex.xml.impl;

public class XJBUpdateRequestImpl implements phex.xml.XJBUpdateRequest, com.sun.xml.bind.JAXBObject, phex.xml.impl.runtime.UnmarshallableObject, phex.xml.impl.runtime.XMLSerializable
{

    protected boolean has_SharedFiles;
    protected int _SharedFiles;
    protected boolean has_LastInfoId;
    protected int _LastInfoId;
    protected java.lang.String _LastCheckVersion;
    protected boolean has_AvgUptime;
    protected long _AvgUptime;
    protected java.lang.String _CurrentVersion;
    protected boolean has_ShowBetaInfo;
    protected boolean _ShowBetaInfo;
    protected java.lang.String _Hostid;
    protected boolean has_StartupCount;
    protected int _StartupCount;
    protected boolean has_SharedSize;
    protected int _SharedSize;
    protected java.lang.String _LafUsed;
    protected boolean has_DailyAvgUptime;
    protected int _DailyAvgUptime;
    protected java.lang.String _ErrorLog;
    protected boolean has_DownloadCount;
    protected int _DownloadCount;
    protected java.lang.String _OperatingSystem;
    protected java.lang.String _JavaVersion;
    protected boolean has_UploadCount;
    protected int _UploadCount;
    public final static java.lang.Class version = (phex.xml.impl.JAXBVersion.class);

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (phex.xml.XJBUpdateRequest.class);
    }

    public int getSharedFiles() {
        return _SharedFiles;
    }

    public void setSharedFiles(int value) {
        _SharedFiles = value;
        has_SharedFiles = true;
    }

    public int getLastInfoId() {
        return _LastInfoId;
    }

    public void setLastInfoId(int value) {
        _LastInfoId = value;
        has_LastInfoId = true;
    }

    public java.lang.String getLastCheckVersion() {
        return _LastCheckVersion;
    }

    public void setLastCheckVersion(java.lang.String value) {
        _LastCheckVersion = value;
    }

    public long getAvgUptime() {
        return _AvgUptime;
    }

    public void setAvgUptime(long value) {
        _AvgUptime = value;
        has_AvgUptime = true;
    }

    public java.lang.String getCurrentVersion() {
        return _CurrentVersion;
    }

    public void setCurrentVersion(java.lang.String value) {
        _CurrentVersion = value;
    }

    public boolean isShowBetaInfo() {
        return _ShowBetaInfo;
    }

    public void setShowBetaInfo(boolean value) {
        _ShowBetaInfo = value;
        has_ShowBetaInfo = true;
    }

    public java.lang.String getHostid() {
        return _Hostid;
    }

    public void setHostid(java.lang.String value) {
        _Hostid = value;
    }

    public int getStartupCount() {
        return _StartupCount;
    }

    public void setStartupCount(int value) {
        _StartupCount = value;
        has_StartupCount = true;
    }

    public int getSharedSize() {
        return _SharedSize;
    }

    public void setSharedSize(int value) {
        _SharedSize = value;
        has_SharedSize = true;
    }

    public java.lang.String getLafUsed() {
        return _LafUsed;
    }

    public void setLafUsed(java.lang.String value) {
        _LafUsed = value;
    }

    public int getDailyAvgUptime() {
        return _DailyAvgUptime;
    }

    public void setDailyAvgUptime(int value) {
        _DailyAvgUptime = value;
        has_DailyAvgUptime = true;
    }

    public java.lang.String getErrorLog() {
        return _ErrorLog;
    }

    public void setErrorLog(java.lang.String value) {
        _ErrorLog = value;
    }

    public int getDownloadCount() {
        return _DownloadCount;
    }

    public void setDownloadCount(int value) {
        _DownloadCount = value;
        has_DownloadCount = true;
    }

    public java.lang.String getOperatingSystem() {
        return _OperatingSystem;
    }

    public void setOperatingSystem(java.lang.String value) {
        _OperatingSystem = value;
    }

    public java.lang.String getJavaVersion() {
        return _JavaVersion;
    }

    public void setJavaVersion(java.lang.String value) {
        _JavaVersion = value;
    }

    public int getUploadCount() {
        return _UploadCount;
    }

    public void setUploadCount(int value) {
        _UploadCount = value;
        has_UploadCount = true;
    }

    public phex.xml.impl.runtime.UnmarshallingEventHandler createUnmarshaller(phex.xml.impl.runtime.UnmarshallingContext context) {
        return new phex.xml.impl.XJBUpdateRequestImpl.Unmarshaller(context);
    }

    public void serializeBody(phex.xml.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (_Hostid!= null) {
            context.startElement("", "hostid");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _Hostid), "Hostid");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_CurrentVersion!= null) {
            context.startElement("", "current-version");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _CurrentVersion), "CurrentVersion");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_StartupCount) {
            context.startElement("", "startup-count");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _StartupCount)), "StartupCount");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_LafUsed!= null) {
            context.startElement("", "laf-used");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _LafUsed), "LafUsed");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_OperatingSystem!= null) {
            context.startElement("", "operating-system");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _OperatingSystem), "OperatingSystem");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_JavaVersion!= null) {
            context.startElement("", "java-version");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _JavaVersion), "JavaVersion");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_AvgUptime) {
            context.startElement("", "avg-uptime");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printLong(((long) _AvgUptime)), "AvgUptime");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_DailyAvgUptime) {
            context.startElement("", "daily-avg-uptime");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _DailyAvgUptime)), "DailyAvgUptime");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_DownloadCount) {
            context.startElement("", "download-count");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _DownloadCount)), "DownloadCount");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_UploadCount) {
            context.startElement("", "upload-count");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _UploadCount)), "UploadCount");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_SharedFiles) {
            context.startElement("", "shared-files");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _SharedFiles)), "SharedFiles");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_SharedSize) {
            context.startElement("", "shared-size");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _SharedSize)), "SharedSize");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_LastCheckVersion!= null) {
            context.startElement("", "last-check-version");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _LastCheckVersion), "LastCheckVersion");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_LastInfoId) {
            context.startElement("", "last-info-id");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _LastInfoId)), "LastInfoId");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_ShowBetaInfo) {
            context.startElement("", "show-beta-info");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _ShowBetaInfo)), "ShowBetaInfo");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ErrorLog!= null) {
            context.startElement("", "error-log");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _ErrorLog), "ErrorLog");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
    }

    public void serializeAttributes(phex.xml.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public void serializeURIs(phex.xml.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public class Unmarshaller
        extends phex.xml.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(phex.xml.impl.runtime.UnmarshallingContext context) {
            super(context, "-------------------------------------------------");
        }

        protected Unmarshaller(phex.xml.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return phex.xml.impl.XJBUpdateRequestImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  9 :
                        if (("laf-used" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  48 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  18 :
                        if (("avg-uptime" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  39 :
                        if (("last-info-id" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 40;
                            return ;
                        }
                        state = 42;
                        continue outer;
                    case  27 :
                        if (("upload-count" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 28;
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  3 :
                        if (("current-version" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  24 :
                        if (("download-count" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  30 :
                        if (("shared-files" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 31;
                            return ;
                        }
                        state = 33;
                        continue outer;
                    case  21 :
                        if (("daily-avg-uptime" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  45 :
                        if (("error-log" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 46;
                            return ;
                        }
                        state = 48;
                        continue outer;
                    case  6 :
                        if (("startup-count" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  12 :
                        if (("operating-system" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  42 :
                        if (("show-beta-info" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 43;
                            return ;
                        }
                        state = 45;
                        continue outer;
                    case  33 :
                        if (("shared-size" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 34;
                            return ;
                        }
                        state = 36;
                        continue outer;
                    case  0 :
                        if (("hostid" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  36 :
                        if (("last-check-version" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 37;
                            return ;
                        }
                        state = 39;
                        continue outer;
                    case  15 :
                        if (("java-version" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  20 :
                        if (("avg-uptime" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("current-version" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  26 :
                        if (("download-count" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 27;
                            return ;
                        }
                        break;
                    case  9 :
                        state = 12;
                        continue outer;
                    case  48 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        if (("startup-count" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 9;
                            return ;
                        }
                        break;
                    case  38 :
                        if (("last-check-version" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 39;
                            return ;
                        }
                        break;
                    case  47 :
                        if (("error-log" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 48;
                            return ;
                        }
                        break;
                    case  44 :
                        if (("show-beta-info" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 45;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("hostid" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  29 :
                        if (("upload-count" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 30;
                            return ;
                        }
                        break;
                    case  41 :
                        if (("last-info-id" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 42;
                            return ;
                        }
                        break;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  39 :
                        state = 42;
                        continue outer;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  35 :
                        if (("shared-size" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 36;
                            return ;
                        }
                        break;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  11 :
                        if (("laf-used" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 12;
                            return ;
                        }
                        break;
                    case  17 :
                        if (("java-version" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 18;
                            return ;
                        }
                        break;
                    case  23 :
                        if (("daily-avg-uptime" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 24;
                            return ;
                        }
                        break;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  45 :
                        state = 48;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  14 :
                        if (("operating-system" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 15;
                            return ;
                        }
                        break;
                    case  42 :
                        state = 45;
                        continue outer;
                    case  33 :
                        state = 36;
                        continue outer;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  36 :
                        state = 39;
                        continue outer;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  32 :
                        if (("shared-files" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 33;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  9 :
                        state = 12;
                        continue outer;
                    case  48 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  39 :
                        state = 42;
                        continue outer;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  45 :
                        state = 48;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  42 :
                        state = 45;
                        continue outer;
                    case  33 :
                        state = 36;
                        continue outer;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  36 :
                        state = 39;
                        continue outer;
                    case  15 :
                        state = 18;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  9 :
                        state = 12;
                        continue outer;
                    case  48 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  39 :
                        state = 42;
                        continue outer;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  45 :
                        state = 48;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  42 :
                        state = 45;
                        continue outer;
                    case  33 :
                        state = 36;
                        continue outer;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  36 :
                        state = 39;
                        continue outer;
                    case  15 :
                        state = 18;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  9 :
                            state = 12;
                            continue outer;
                        case  48 :
                            revertToParentFromText(value);
                            return ;
                        case  19 :
                            state = 20;
                            eatText1(value);
                            return ;
                        case  18 :
                            state = 21;
                            continue outer;
                        case  39 :
                            state = 42;
                            continue outer;
                        case  27 :
                            state = 30;
                            continue outer;
                        case  34 :
                            state = 35;
                            eatText2(value);
                            return ;
                        case  1 :
                            state = 2;
                            eatText3(value);
                            return ;
                        case  3 :
                            state = 6;
                            continue outer;
                        case  24 :
                            state = 27;
                            continue outer;
                        case  16 :
                            state = 17;
                            eatText4(value);
                            return ;
                        case  13 :
                            state = 14;
                            eatText5(value);
                            return ;
                        case  30 :
                            state = 33;
                            continue outer;
                        case  25 :
                            state = 26;
                            eatText6(value);
                            return ;
                        case  22 :
                            state = 23;
                            eatText7(value);
                            return ;
                        case  46 :
                            state = 47;
                            eatText8(value);
                            return ;
                        case  31 :
                            state = 32;
                            eatText9(value);
                            return ;
                        case  21 :
                            state = 24;
                            continue outer;
                        case  45 :
                            state = 48;
                            continue outer;
                        case  6 :
                            state = 9;
                            continue outer;
                        case  12 :
                            state = 15;
                            continue outer;
                        case  7 :
                            state = 8;
                            eatText10(value);
                            return ;
                        case  40 :
                            state = 41;
                            eatText11(value);
                            return ;
                        case  37 :
                            state = 38;
                            eatText12(value);
                            return ;
                        case  42 :
                            state = 45;
                            continue outer;
                        case  33 :
                            state = 36;
                            continue outer;
                        case  28 :
                            state = 29;
                            eatText13(value);
                            return ;
                        case  0 :
                            state = 3;
                            continue outer;
                        case  43 :
                            state = 44;
                            eatText14(value);
                            return ;
                        case  4 :
                            state = 5;
                            eatText15(value);
                            return ;
                        case  36 :
                            state = 39;
                            continue outer;
                        case  15 :
                            state = 18;
                            continue outer;
                        case  10 :
                            state = 11;
                            eatText16(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _AvgUptime = javax.xml.bind.DatatypeConverter.parseLong(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_AvgUptime = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _SharedSize = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_SharedSize = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Hostid = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _JavaVersion = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _OperatingSystem = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _DownloadCount = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_DownloadCount = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _DailyAvgUptime = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_DailyAvgUptime = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ErrorLog = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText9(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _SharedFiles = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_SharedFiles = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText10(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _StartupCount = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_StartupCount = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText11(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _LastInfoId = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_LastInfoId = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText12(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _LastCheckVersion = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText13(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _UploadCount = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_UploadCount = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText14(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ShowBetaInfo = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_ShowBetaInfo = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText15(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _CurrentVersion = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText16(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _LafUsed = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
