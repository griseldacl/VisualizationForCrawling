//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-20051113-fcs 
// 	See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// 	Any modifications to this file will be lost upon recompilation of the source schema. 
// 	Generated on: 2005.11.16 um 11:03:34 CET 
//


package phex.xml.impl;

public class XJBGUISettingsImpl implements phex.xml.XJBGUISettings, com.sun.xml.bind.JAXBObject, phex.xml.impl.runtime.UnmarshallableObject, phex.xml.impl.runtime.XMLSerializable
{

    protected boolean has_RespectCopyrightNoticeShown;
    protected boolean _RespectCopyrightNoticeShown;
    protected boolean has_WindowPosX;
    protected int _WindowPosX;
    protected boolean has_WindowWidth;
    protected int _WindowWidth;
    protected java.lang.String _LookAndFeelClass;
    protected boolean has_LogBandwidthSliderUsed;
    protected boolean _LogBandwidthSliderUsed;
    protected boolean has_WindowHeight;
    protected int _WindowHeight;
    protected phex.xml.XJBGUITableList _TableList;
    protected com.sun.xml.bind.util.ListImpl _TabList;
    protected boolean has_WindowPosY;
    protected int _WindowPosY;
    protected boolean has_ToolbarVisible;
    protected boolean _ToolbarVisible;
    public final static java.lang.Class version = (phex.xml.impl.JAXBVersion.class);

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (phex.xml.XJBGUISettings.class);
    }

    public boolean isRespectCopyrightNoticeShown() {
        return _RespectCopyrightNoticeShown;
    }

    public void setRespectCopyrightNoticeShown(boolean value) {
        _RespectCopyrightNoticeShown = value;
        has_RespectCopyrightNoticeShown = true;
    }

    public boolean isSetRespectCopyrightNoticeShown() {
        return has_RespectCopyrightNoticeShown;
    }

    public void unsetRespectCopyrightNoticeShown() {
        has_RespectCopyrightNoticeShown = false;
    }

    public int getWindowPosX() {
        return _WindowPosX;
    }

    public void setWindowPosX(int value) {
        _WindowPosX = value;
        has_WindowPosX = true;
    }

    public boolean isSetWindowPosX() {
        return has_WindowPosX;
    }

    public void unsetWindowPosX() {
        has_WindowPosX = false;
    }

    public int getWindowWidth() {
        return _WindowWidth;
    }

    public void setWindowWidth(int value) {
        _WindowWidth = value;
        has_WindowWidth = true;
    }

    public boolean isSetWindowWidth() {
        return has_WindowWidth;
    }

    public void unsetWindowWidth() {
        has_WindowWidth = false;
    }

    public java.lang.String getLookAndFeelClass() {
        return _LookAndFeelClass;
    }

    public void setLookAndFeelClass(java.lang.String value) {
        _LookAndFeelClass = value;
    }

    public boolean isLogBandwidthSliderUsed() {
        return _LogBandwidthSliderUsed;
    }

    public void setLogBandwidthSliderUsed(boolean value) {
        _LogBandwidthSliderUsed = value;
        has_LogBandwidthSliderUsed = true;
    }

    public boolean isSetLogBandwidthSliderUsed() {
        return has_LogBandwidthSliderUsed;
    }

    public void unsetLogBandwidthSliderUsed() {
        has_LogBandwidthSliderUsed = false;
    }

    public int getWindowHeight() {
        return _WindowHeight;
    }

    public void setWindowHeight(int value) {
        _WindowHeight = value;
        has_WindowHeight = true;
    }

    public boolean isSetWindowHeight() {
        return has_WindowHeight;
    }

    public void unsetWindowHeight() {
        has_WindowHeight = false;
    }

    public phex.xml.XJBGUITableList getTableList() {
        return _TableList;
    }

    public void setTableList(phex.xml.XJBGUITableList value) {
        _TableList = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getTabList() {
        if (_TabList == null) {
            _TabList = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _TabList;
    }

    public java.util.List getTabList() {
        return _getTabList();
    }

    public int getWindowPosY() {
        return _WindowPosY;
    }

    public void setWindowPosY(int value) {
        _WindowPosY = value;
        has_WindowPosY = true;
    }

    public boolean isSetWindowPosY() {
        return has_WindowPosY;
    }

    public void unsetWindowPosY() {
        has_WindowPosY = false;
    }

    public boolean isToolbarVisible() {
        return _ToolbarVisible;
    }

    public void setToolbarVisible(boolean value) {
        _ToolbarVisible = value;
        has_ToolbarVisible = true;
    }

    public boolean isSetToolbarVisible() {
        return has_ToolbarVisible;
    }

    public void unsetToolbarVisible() {
        has_ToolbarVisible = false;
    }

    public phex.xml.impl.runtime.UnmarshallingEventHandler createUnmarshaller(phex.xml.impl.runtime.UnmarshallingContext context) {
        return new phex.xml.impl.XJBGUISettingsImpl.Unmarshaller(context);
    }

    public void serializeBody(phex.xml.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx8 = 0;
        final int len8 = ((_TabList == null)? 0 :_TabList.size());
        if (_LookAndFeelClass!= null) {
            context.startElement("", "look-and-feel-class");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _LookAndFeelClass), "LookAndFeelClass");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_ToolbarVisible) {
            context.startElement("", "is-toolbar-visible");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _ToolbarVisible)), "ToolbarVisible");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_LogBandwidthSliderUsed) {
            context.startElement("", "is-log-bandwidth-slider-used");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _LogBandwidthSliderUsed)), "LogBandwidthSliderUsed");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_RespectCopyrightNoticeShown) {
            context.startElement("", "show-respect-copyright-notice");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _RespectCopyrightNoticeShown)), "RespectCopyrightNoticeShown");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_WindowPosX) {
            context.startElement("", "window-posX");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _WindowPosX)), "WindowPosX");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_WindowPosY) {
            context.startElement("", "window-posY");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _WindowPosY)), "WindowPosY");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_WindowWidth) {
            context.startElement("", "window-width");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _WindowWidth)), "WindowWidth");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (has_WindowHeight) {
            context.startElement("", "window-height");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _WindowHeight)), "WindowHeight");
            } catch (java.lang.Exception e) {
                phex.xml.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        while (idx8 != len8) {
            context.startElement("", "tab");
            int idx_16 = idx8;
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _TabList.get(idx_16 ++)), "TabList");
            context.endNamespaceDecls();
            int idx_17 = idx8;
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _TabList.get(idx_17 ++)), "TabList");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _TabList.get(idx8 ++)), "TabList");
            context.endElement();
        }
        if (_TableList!= null) {
            context.startElement("", "table-list");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _TableList), "TableList");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _TableList), "TableList");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _TableList), "TableList");
            context.endElement();
        }
    }

    public void serializeAttributes(phex.xml.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx8 = 0;
        final int len8 = ((_TabList == null)? 0 :_TabList.size());
        while (idx8 != len8) {
            idx8 += 1;
        }
    }

    public void serializeURIs(phex.xml.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx8 = 0;
        final int len8 = ((_TabList == null)? 0 :_TabList.size());
        while (idx8 != len8) {
            idx8 += 1;
        }
    }

    public class Unmarshaller
        extends phex.xml.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(phex.xml.impl.runtime.UnmarshallingContext context) {
            super(context, "-------------------------------");
        }

        protected Unmarshaller(phex.xml.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return phex.xml.impl.XJBGUISettingsImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        if (("window-posY" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  18 :
                        if (("window-width" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  30 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  24 :
                        if (("tab" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  12 :
                        if (("window-posX" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  9 :
                        if (("show-respect-copyright-notice" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  6 :
                        if (("is-log-bandwidth-slider-used" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  25 :
                        attIdx = context.getAttribute("", "tabID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  21 :
                        if (("window-height" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  28 :
                        attIdx = context.getAttribute("", "showHorizontalLines");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "showVerticalLines");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("table" == ___local)&&("" == ___uri)) {
                            _TableList = ((phex.xml.impl.XJBGUITableListImpl) spawnChildFromEnterElement((phex.xml.impl.XJBGUITableListImpl.class), 29, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _TableList = ((phex.xml.impl.XJBGUITableListImpl) spawnChildFromEnterElement((phex.xml.impl.XJBGUITableListImpl.class), 29, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  0 :
                        if (("look-and-feel-class" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  27 :
                        if (("tab" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 25;
                            return ;
                        }
                        if (("table-list" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 28;
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  3 :
                        if (("is-toolbar-visible" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  5 :
                        if (("is-toolbar-visible" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  20 :
                        if (("window-width" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  30 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  23 :
                        if (("window-height" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 24;
                            return ;
                        }
                        break;
                    case  17 :
                        if (("window-posY" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 18;
                            return ;
                        }
                        break;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  9 :
                        state = 12;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  25 :
                        attIdx = context.getAttribute("", "tabID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  14 :
                        if (("window-posX" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 15;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("look-and-feel-class" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  26 :
                        if (("tab" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 27;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("is-log-bandwidth-slider-used" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 9;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("show-respect-copyright-notice" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 12;
                            return ;
                        }
                        break;
                    case  28 :
                        attIdx = context.getAttribute("", "showHorizontalLines");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "showVerticalLines");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _TableList = ((phex.xml.impl.XJBGUITableListImpl) spawnChildFromLeaveElement((phex.xml.impl.XJBGUITableListImpl.class), 29, ___uri, ___local, ___qname));
                        return ;
                    case  29 :
                        if (("table-list" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 30;
                            return ;
                        }
                        break;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        state = 18;
                        continue outer;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  30 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  9 :
                        state = 12;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  25 :
                        if (("tabID" == ___local)&&("" == ___uri)) {
                            _getTabList().add(((phex.xml.impl.XJBGUITabImpl) spawnChildFromEnterAttribute((phex.xml.impl.XJBGUITabImpl.class), 26, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  28 :
                        if (("showHorizontalLines" == ___local)&&("" == ___uri)) {
                            _TableList = ((phex.xml.impl.XJBGUITableListImpl) spawnChildFromEnterAttribute((phex.xml.impl.XJBGUITableListImpl.class), 29, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("showVerticalLines" == ___local)&&("" == ___uri)) {
                            _TableList = ((phex.xml.impl.XJBGUITableListImpl) spawnChildFromEnterAttribute((phex.xml.impl.XJBGUITableListImpl.class), 29, ___uri, ___local, ___qname));
                            return ;
                        }
                        _TableList = ((phex.xml.impl.XJBGUITableListImpl) spawnChildFromEnterAttribute((phex.xml.impl.XJBGUITableListImpl.class), 29, ___uri, ___local, ___qname));
                        return ;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        state = 18;
                        continue outer;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  30 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  9 :
                        state = 12;
                        continue outer;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  25 :
                        attIdx = context.getAttribute("", "tabID");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  28 :
                        attIdx = context.getAttribute("", "showHorizontalLines");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "showVerticalLines");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _TableList = ((phex.xml.impl.XJBGUITableListImpl) spawnChildFromLeaveAttribute((phex.xml.impl.XJBGUITableListImpl.class), 29, ___uri, ___local, ___qname));
                        return ;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  15 :
                            state = 18;
                            continue outer;
                        case  18 :
                            state = 21;
                            continue outer;
                        case  30 :
                            revertToParentFromText(value);
                            return ;
                        case  24 :
                            state = 27;
                            continue outer;
                        case  16 :
                            state = 17;
                            eatText1(value);
                            return ;
                        case  4 :
                            state = 5;
                            eatText2(value);
                            return ;
                        case  12 :
                            state = 15;
                            continue outer;
                        case  9 :
                            state = 12;
                            continue outer;
                        case  6 :
                            state = 9;
                            continue outer;
                        case  25 :
                            attIdx = context.getAttribute("", "tabID");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  7 :
                            state = 8;
                            eatText3(value);
                            return ;
                        case  13 :
                            state = 14;
                            eatText4(value);
                            return ;
                        case  22 :
                            state = 23;
                            eatText5(value);
                            return ;
                        case  21 :
                            state = 24;
                            continue outer;
                        case  19 :
                            state = 20;
                            eatText6(value);
                            return ;
                        case  28 :
                            attIdx = context.getAttribute("", "showHorizontalLines");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "showVerticalLines");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _TableList = ((phex.xml.impl.XJBGUITableListImpl) spawnChildFromText((phex.xml.impl.XJBGUITableListImpl.class), 29, value));
                            return ;
                        case  1 :
                            state = 2;
                            eatText7(value);
                            return ;
                        case  0 :
                            state = 3;
                            continue outer;
                        case  27 :
                            state = 30;
                            continue outer;
                        case  3 :
                            state = 6;
                            continue outer;
                        case  10 :
                            state = 11;
                            eatText8(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _WindowPosY = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_WindowPosY = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ToolbarVisible = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_ToolbarVisible = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _LogBandwidthSliderUsed = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_LogBandwidthSliderUsed = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _WindowPosX = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_WindowPosX = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _WindowHeight = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_WindowHeight = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _WindowWidth = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_WindowWidth = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _LookAndFeelClass = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _RespectCopyrightNoticeShown = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_RespectCopyrightNoticeShown = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
